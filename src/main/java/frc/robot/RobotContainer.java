// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.Constants.OperatorConstants;
import frc.robot.commands.*;
import frc.robot.commands.Climb.ClimbEnableCmd;
import frc.robot.commands.Climb.ClimbEnableCmdPart2;
import frc.robot.commands.ElevatorAndArm.*;
import frc.robot.commands.Fangs.FangsCmd;
import frc.robot.commands.algae.AlgaeCmd;
import frc.robot.subsystems.*;
import frc.robot.subsystems.AlgaeIntake.PivotPos;
import frc.robot.subsystems.ElevatorAndArm.ElevAndArmPos;
import frc.robot.subsystems.Fangs.Fang;
import swervelib.SwerveInputStream;
import edu.wpi.first.wpilibj.smartdashboard.Field2d;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import edu.wpi.first.wpilibj2.command.button.Trigger;

import java.io.File;
import java.io.ObjectInputFilter.Status;
import java.util.jar.Attributes.Name;

import com.pathplanner.lib.auto.AutoBuilder;
import com.pathplanner.lib.auto.NamedCommands;
import com.pathplanner.lib.commands.PathPlannerAuto;
import com.pathplanner.lib.events.EventTrigger;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import frc.robot.subsystems.*;
import frc.robot.commands.drivebase.AbsoluteDriveAdv;
import frc.robot.commands.drivebase.AutoAlignCmd;
import frc.robot.commands.drivebase.cmdAutoTurn;
import frc.robot.commands.drivebase.cmdResetGyro;
import frc.robot.commands.drivebase.cmdTurbo;
import frc.robot.commands.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // The robot's subsystems
  //public final Sensors m_sensors = new Sensors();
  public final DriveTrain m_driveTrain = new DriveTrain(new File(Filesystem.getDeployDirectory(), "swerve"));
  public final ElevatorAndArm m_elevatorAndArm = new ElevatorAndArm();
  public final Coral m_Coral = new Coral();
  public final AlgaeIntake m_AlgaeIntake = new AlgaeIntake();
  public final Fangs m_Fangs = new Fangs();
  public final Climb m_Climb = new Climb();
  // Joysticks
  private final CommandXboxController Articulator = new CommandXboxController(1);
  private final CommandXboxController drive_Controller = new CommandXboxController(0);


  private final Pose2d  targetPose = new Pose2d(17.667, 6.90, new Rotation2d(Math.toRadians(122.0)));
  private final Field2d m_field = new Field2d();
  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /**
   * Converts driver input into a field-relative ChassisSpeeds that is controlled
   * by angular velocity.
   */
  SwerveInputStream driveAngularVelocity = SwerveInputStream.of(m_driveTrain.getSwerveDrive(),
      () -> drive_Controller.getLeftY() * -1,
      () -> drive_Controller.getLeftX() * -1)
      .withControllerRotationAxis(this::getRightXInverted)
      .deadband(OperatorConstants.DEADBAND)
      .scaleTranslation(0.8)
      .allianceRelativeControl(true);

  // Applies deadbands and inverts controls because joysticks
  // are back-right positive while robot
  // controls are front-left positive
  // left stick controls translation
  // right stick controls the desired angle NOT angular rotation
  Command driveFieldOrientedDirectAngle = m_driveTrain.driveFieldOriented(driveAngularVelocity);

  // A chooser for autonomous commands
  private final SendableChooser<Command> m_chooser;

  private double getRightXInverted() {
    if(m_driveTrain.getbAutoDrive()){
      return m_driveTrain.AutoTurn();
    }else {
    return this.drive_Controller.getRightX() * -1;
    }
  }

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    /////////////////////////////////////////

    m_Coral.setElevatorAndArmSystem(m_elevatorAndArm);
    m_elevatorAndArm.setCoralSystem(m_Coral);
    m_elevatorAndArm.configCoralCompensation();

    /**** PATH PLANNER NAMED COMMANDS *****/

    NamedCommands.registerCommand("RESETGYRO", new cmdResetGyro());
    // NamedCommands.registerCommand("Coral Reset", new coralReset());
    NamedCommands.registerCommand("EA PICKUP", new EAGoToLevel(ElevAndArmPos.PICKUP));
    NamedCommands.registerCommand("Fangs", new FangsCmd());
    //NamedCommands.registerCommand("Fang Right", new FangsCmd());
    NamedCommands.registerCommand("AUTONINIT", new autonInit());
    NamedCommands.registerCommand("Algae START",
        new AlgaeCmd(AlgaeIntake.PivotPos.CORALPICKUP, AlgaeIntake.Status.STOPPED));
    NamedCommands.registerCommand("EA INTAKE", new EAGoToLevel(ElevAndArmPos.PICKUP));
    NamedCommands.registerCommand("EA INTAKE DELAYED", new EAGoToLevel(ElevAndArmPos.PICKUP, 1.3));
    NamedCommands.registerCommand("INTAKE COMPLETE", new autoCoralCompleteCmd());
    NamedCommands.registerCommand("EA LEVEL1", new EAGoToLevel(ElevAndArmPos.LEVEL1));
    NamedCommands.registerCommand("EA LEVEL2", new EAGoToLevel(ElevAndArmPos.LEVEL2));
    NamedCommands.registerCommand("EA LEVEL3", new EAGoToLevel(ElevAndArmPos.LEVEL3));
    NamedCommands.registerCommand("EA LEVEL4", new EAGoToLevel(ElevAndArmPos.LEVEL4));
    NamedCommands.registerCommand("EA OUTOFWAY", new EAGoToLevel(ElevAndArmPos.LEVEL4OUTOFWAY));
    NamedCommands.registerCommand("CORAL DELIVER", new deliverCoralCmd());
    NamedCommands.registerCommand("EA ALGAE1", new EAGoToLevel(ElevAndArmPos.ALGAEEXTRACTLOWER));
    NamedCommands.registerCommand("EA PROCESSOR", new EAGoToLevel(ElevAndArmPos.ALGAEPROCESSORDeploy));
    NamedCommands.registerCommand("EA ALGAE2", new EAGoToLevel(ElevAndArmPos.ALGAEEXTRACTUPPER));
    
    // NamedCommands.registerCommand("CORAL INTAKE", new
    // EAGoToLevel(ElevAndArmPos.CIntake));
    // NamedCommands.registerCommand("EA LEVEL6", new EAGoToLevel(ElevAndArmPos));

    // SmartDashboard Buttons
    // SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("Arm Pos PICKUP", new EAGoToLevel(ElevAndArmPos.PICKUP));
    SmartDashboard.putData("Arm Pos Saftey", new EAGoToLevel(ElevAndArmPos.SAFETYPOS));
   // SmartDashboard.putData("auton init", new autonInit());
    // SmartDashboard.putData("Arm Pos lvl1", new
    // EAGoToLevel(ElevAndArmPos.LEVEL1));
    // SmartDashboard.putData("Arm Pos lvl2", new
    // EAGoToLevel(ElevAndArmPos.LEVEL2));
    // SmartDashboard.putData("Arm Pos lvl3", new
    // EAGoToLevel(ElevAndArmPos.LEVEL3));
    // SmartDashboard.putData("Arm Pos lvl4", new
    // EAGoToLevel(ElevAndArmPos.LEVEL4));

    SmartDashboard.putData("Algae Pickup", new AlgaeCmd(PivotPos.PICKUP, AlgaeIntake.Status.IN));
    SmartDashboard.putData("Algae Start", new AlgaeCmd(PivotPos.START, AlgaeIntake.Status.STOPPED));
    SmartDashboard.putData("Algae STOP", new AlgaeCmd(PivotPos.STOP, AlgaeIntake.Status.STOPPED));
    SmartDashboard.putData("Align Wheels", m_driveTrain.centerModulesCommand());
    SmartDashboard.putData("Field", m_field);
    // SmartDashboard.putData("Coral Reset", new CmdCoralReset());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    boolean isCompetition = true; //CHANGE AT COMP

    // Build an auto chooser. This will use Commands.none() as the default option.
    // As an example, this will only show autos that start with "comp" while at
    // competition as defined by the programmer
    m_chooser = AutoBuilder.buildAutoChooserWithOptionsModifier(
        (stream) -> isCompetition
            ? stream.filter(auto -> auto.getName().endsWith("COMP"))
            : stream);
    // m_chooser.setDefaultOption("Auto DEFAULT", new
    // PathPlannerAuto("TEST1.auto"));
    // m_chooser.addOption("TEST1", new PathPlannerAuto("TEST1.auto"));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons
    m_driveTrain.setDefaultCommand(driveFieldOrientedDirectAngle);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS

    Trigger DDown_Drive = new Trigger(drive_Controller.povDown()); // AB
    DDown_Drive.onTrue(new EAGoToLevel(ElevAndArmPos.LEVEL1));
   // DDown_Drive.onTrue(new cmdAutoTurn(0, 180));

    Trigger DLeft_Drive = new Trigger(drive_Controller.povLeft());
    DLeft_Drive.onTrue(new EAGoToLevel(ElevAndArmPos.PICKUP));
   // DLeft_Drive.whileTrue(new AutoAlignCmd(() -> m_driveTrain.vision.getRobotInTagSpace(), () -> m_driveTrain.vision.getLatestID(), true, m_driveTrain));
    

    Trigger DUp_Drive = new Trigger(drive_Controller.povUp()); // GH
    DUp_Drive.onTrue(new EAGoToLevel(ElevAndArmPos.LEVEL4));
    //DUp_Drive.onTrue(new cmdAutoTurn(180, 0));

    Trigger DRight_Drive = new Trigger(drive_Controller.povRight());
    DRight_Drive.onTrue(new EAGoToLevel(ElevAndArmPos.ALGAEEXTRACTUPPER));

    Trigger A_Drive = new Trigger(drive_Controller.a()); // CD
    // A_Drive.onTrue(new EAGoToLevel(ElevAndArmPos.ALGAEEXTRACTLOWER));
    A_Drive.onTrue(new cmdAutoTurn(-120, 60 ));
    Trigger B_Drive = new Trigger(drive_Controller.b()); // EF
    // B_Drive.onTrue(new EAGoToLevel(ElevAndArmPos.ALGAEEXTRACTUPPER));
    B_Drive.onTrue(new cmdAutoTurn(-60, 120));

    Trigger X_Drive = new Trigger(drive_Controller.x()); // KL
    X_Drive.onTrue(new cmdAutoTurn(120, -60));

    Trigger Y_Drive = new Trigger(drive_Controller.y()); // IJ
    Y_Drive.onTrue(new cmdAutoTurn(60,-120));
    Trigger Back_Drive = new Trigger(drive_Controller.back()); // reset gyrp
    Back_Drive.onTrue(new cmdResetGyro());
    Trigger Start_Drive = new Trigger(drive_Controller.start());
    Start_Drive.onTrue (new cmdTurbo());

    Trigger LBumper_Drive = new Trigger(drive_Controller.leftBumper());
    LBumper_Drive.onTrue(new AlgaeCmd(AlgaeIntake.PivotPos.PICKUP, AlgaeIntake.Status.IN));
    Trigger Ltrigger_Drive = new Trigger(drive_Controller.leftTrigger(0.8));
    Ltrigger_Drive.onTrue(new AlgaeCmd(AlgaeIntake.PivotPos.HELD, AlgaeIntake.Status.OUT));
    Ltrigger_Drive.onFalse(new AlgaeCmd(AlgaeIntake.PivotPos.CORALPICKUP, AlgaeIntake.Status.STOPPED));

    Trigger RBumper_Drive = new Trigger(drive_Controller.rightBumper());
    RBumper_Drive.whileTrue(m_driveTrain.driveCommand(() -> (-getDrive_Controller().getLeftY() * .4), () -> (-getDrive_Controller().getLeftX() * .4), () -> getDrive_Controller().getRightX()));
   // RBumper_Drive.onTrue(new FangsCmd(Fangs.Fang.RIGHT));
    Trigger Rtrigger_Drive = new Trigger(drive_Controller.rightTrigger(0.5));
    Rtrigger_Drive.onTrue(new deliverCoralCmd());
    Rtrigger_Drive.onFalse(new EAoutOfWay());
    // Trigger LJC_Drive = new Trigger(drive_Controller.leftStick());
    Trigger RJC_Drive = new Trigger(drive_Controller.rightStick());
    //RJC_Drive.whileTrue(m_driveTrain.driveCommand(() -> -getDrive_Controller().getLeftY(), () -> -getDrive_Controller().getLeftX(), () -> getDrive_Controller().getRightX()));
    Trigger DDown_Artic = new Trigger(Articulator.povDown());
    // Trigger test = new Trigger(Articulator.povDown(null));
    DDown_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.LEVEL1));
    Trigger DLeft_Artic = new Trigger(Articulator.povLeft());
    DLeft_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.LEVEL2));
    Trigger DUp_Artic = new Trigger(Articulator.povUp());
    DUp_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.LEVEL3));
    Trigger DRight_Artic = new Trigger(Articulator.povRight());
    DRight_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.LEVEL4));
    Trigger A_Artic = new Trigger(Articulator.a());
    A_Artic.onTrue(new AlgaeCmd(AlgaeIntake.PivotPos.PICKUP, AlgaeIntake.Status.IN));
    Trigger B_Artic = new Trigger(Articulator.b());
    B_Artic.onTrue(new AlgaeCmd(AlgaeIntake.PivotPos.CORALPICKUP, AlgaeIntake.Status.STOPPED));
  

    Trigger X_Artic = new Trigger(Articulator.x());
    X_Artic.onTrue(new FangsCmd());
    // X_Artic.onTrue(new CmdCoralIntake());
    Trigger Y_Artic = new Trigger(Articulator.y());
    Y_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.PICKUP));

    Trigger Back_Artic = new Trigger(Articulator.back()); // USE FOR ARTICULATION STOP.
   // Back_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.LEVEL2));
   Back_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.ALGAEPROCESSORDeploy));
    Trigger Start_Artic = new Trigger(Articulator.start()); // USE FOR climb part2
    // ARTICULATION COAST.
    Start_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.LEVEL3));
    Trigger LBumper_Artic = new Trigger(Articulator.leftBumper()); // USE FOR GUIDE RAIL.
    // LBumper_Artic.onTrue(new FangsCmd(Fang.LEFT));
    LBumper_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.ALGAEEXTRACTLOWER));

    Trigger Ltrigger_Artic = new Trigger(Articulator.leftTrigger(0.8));
    Ltrigger_Artic.onTrue(new AlgaeCmd(AlgaeIntake.PivotPos.HELD, AlgaeIntake.Status.OUT));
    Ltrigger_Artic.onFalse(new AlgaeCmd(AlgaeIntake.PivotPos.CORALPICKUP, AlgaeIntake.Status.STOPPED));

    Trigger RBumper_Artic = new Trigger(Articulator.rightBumper()); // USE FOR GUIDE RAIL.
    // RBumper_Artic.onTrue(new FangsCmd(Fang.RIGHT));
    RBumper_Artic.onTrue(new EAGoToLevel(ElevAndArmPos.ALGAEEXTRACTUPPER));
    Trigger Rtrigger_Artic = new Trigger(Articulator.rightTrigger(0.8)); // USE FOR CORAL DELIVERY.
    Rtrigger_Artic.onTrue(new deliverCoralCmd());
    Rtrigger_Artic.onFalse(new EAoutOfWay());
    Trigger LJC_Artic = new Trigger(Articulator.leftStick()); // USE FOR CLIMB ENABLE.
    LJC_Artic.onTrue(new ClimbEnableCmdPart2());
    Trigger RJC_Artic = new Trigger(Articulator.rightStick());

    // Trigger Coralhopper = new Trigger(m_Coral.Coralhopper::get);
    // Coralhopper.onFalse(new CmdCoralReset());
    // Trigger CoralIntake = new Trigger(m_Coral.CoralIntake::get);
    // CoralIntake.onFalse(new CmdCoralIntake());

    Trigger AlgIntake = new Trigger(m_AlgaeIntake.AlgIntake::get);
    AlgIntake.onFalse(new AlgaeCmd(AlgaeIntake.PivotPos.HELD, AlgaeIntake.Status.STOPPED, 0.5));

    // RIGHT JOYSTICK TO CONTROL CLIMB.
    // LEFT JOYSTICK TO CONTROL CORAL DROPPER.
    // RIGHT X AXIS TO CONTROL HOPPER FAST.
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public CommandXboxController getDrive_Controller() {
    return drive_Controller;
  }

  public CommandXboxController getArticulator() {
    return Articulator;
  }

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

  public void updateSmartDashboard() {
    SmartDashboard.putString("Robot Odometery", m_driveTrain.getPose().toString());
    SmartDashboard.putNumber("theading", m_driveTrain.THeading);
    SmartDashboard.putNumber("turn value", m_driveTrain.AutoTurn());
    SmartDashboard.putBoolean("is intaking", !m_elevatorAndArm.isIntaking);
    SmartDashboard.putNumber("Arm Targ", m_elevatorAndArm.getTargetArmPos());
    SmartDashboard.putNumber("Arm Cur", m_elevatorAndArm.getArmCurPos());
    SmartDashboard.putBoolean("Arm in Pos", m_elevatorAndArm.isArmAtTarget(m_elevatorAndArm.getTargetPos()));
    SmartDashboard.putNumber("Elev Poc", m_elevatorAndArm.getElevatorCurPos());
    SmartDashboard.putNumber("Elev Targ", m_elevatorAndArm.getElevatorTargPos());
    // SmartDashboard.putNumber("ElevApplied" ,
    // m_AlgaeIntake.pivotMotor.getAppliedOutput());
    // SmartDashboard.putNumber("ElevOutput",m_AlgaeIntake.pivotMotor.getOutputCurrent()
    // );
    SmartDashboard.putNumber("AlgaePivPos", m_AlgaeIntake.getPivotCurPos());
    SmartDashboard.putNumber("Alg Piv Target", m_AlgaeIntake.getTargetPivPos());
    // SmartDashboard.putNumber("Coral Current",
    // m_elevatorAndArm.coralMotor.getOutputCurrent());
    // SmartDashboard.putNumber("Coral output",
    // m_elevatorAndArm.coralMotor.getAppliedOutput());
    // SmartDashboard.putNumber("Coral Velocity",
    // m_elevatorAndArm.coralMotor.getEncoder().getVelocity());
     SmartDashboard.putNumber("Left Guide Pos", m_Fangs.getLeftCurPos());
    SmartDashboard.putNumber("Left Guid Target", m_Fangs.getLeftTargetPos());
    SmartDashboard.putNumber("Right Guide Pos", m_Fangs.getRightCurPos());
    SmartDashboard.putNumber("Right Guid Target", m_Fangs.getRightTargetPos());
    SmartDashboard.putBoolean("Right Fang", m_Fangs.isRightAtTarget(Fangs.GuidePos.OUT));
    SmartDashboard.putBoolean("Left Fang", m_Fangs.isLeftAtTarget(Fangs.GuidePos.OUT));
    SmartDashboard.putBoolean("holdCoral", m_Coral.getIsHolding());
    SmartDashboard.putNumber("Coral Cur Pos", m_Coral.getCoralCurPos());
    SmartDashboard.putString("CoralPhase", m_Coral.getCoralPhaseString());
    SmartDashboard.putNumber("Coral Target Pos", m_Coral.getCoralCmdPos());
    SmartDashboard.putString("ElevAndArmPos Tar", m_elevatorAndArm.getTargetPos().toString());
    SmartDashboard.putBoolean("Coral Intake", m_Coral.CoralIntake.get());
    SmartDashboard.putBoolean("Coral Hopper", m_Coral.Coralhopper.get());
    SmartDashboard.putBoolean("Algae Intake", m_AlgaeIntake.AlgIntake.get());
    SmartDashboard.putNumber("Deploy Motor Cur Pos", m_Climb.getDeployCurPos());
    SmartDashboard.putNumber("Climb Motor Cur Pos", m_Climb.getClimbCurPos());
    m_field.setRobotPose(m_driveTrain.getPose());
    SmartDashboard.putNumber("Curr Pose x", m_driveTrain.getPose().getX());
    SmartDashboard.putNumber("Curr Pose y", m_driveTrain.getPose().getY());
    SmartDashboard.putNumber("Curr Pose theta", m_driveTrain.getPose().getRotation().getDegrees()); 
    SmartDashboard.putNumber("Curr Tag ID", m_driveTrain.vision.getLatestID());
    SmartDashboard.putBoolean("Turbo", m_driveTrain.getTurbo());
    // SmartDashboard.putBoolean("Hold Coral", m_elevatorAndArm.holdCoral);
  }

  private Pose2d calcTargetPose(boolean isRight){
    if (DriverStation.getAlliance().get() == DriverStation.Alliance.Red){
      if (isRight){
        if (getDrive_Controller().a().getAsBoolean()){
          return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61)));// Not updated
        }else if (getDrive_Controller().b().getAsBoolean()){
          return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
      }else if (getDrive_Controller().x().getAsBoolean()){
        return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
      }else if (getDrive_Controller().y().getAsBoolean()){
        return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
      }else if(getDrive_Controller().povUp().getAsBoolean()){
        return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
      }else if(getDrive_Controller().povDown().getAsBoolean()){
        return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
      }
      
    }else { // Left
      if (getDrive_Controller().a().getAsBoolean()){
        return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61)));// Not updated
      }else if (getDrive_Controller().b().getAsBoolean()){
        return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }else if (getDrive_Controller().x().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }else if (getDrive_Controller().y().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }else if(getDrive_Controller().povUp().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }else if(getDrive_Controller().povDown().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }
    }
  }else if(DriverStation.getAlliance().get() == DriverStation.Alliance.Blue){
    if (isRight){
      if (getDrive_Controller().a().getAsBoolean()){
        return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61)));// Not updated
      }else if (getDrive_Controller().b().getAsBoolean()){
        return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }else if (getDrive_Controller().x().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }else if (getDrive_Controller().y().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }else if(getDrive_Controller().povUp().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }else if(getDrive_Controller().povDown().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
    }
    
  }else { // Left
    if (getDrive_Controller().a().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61)));// Not updated
    }else if (getDrive_Controller().b().getAsBoolean()){
      return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
  }else if (getDrive_Controller().x().getAsBoolean()){
    return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
  }else if (getDrive_Controller().y().getAsBoolean()){
    return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
  }else if(getDrive_Controller().povUp().getAsBoolean()){
    return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
  }else if(getDrive_Controller().povDown().getAsBoolean()){
    return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated
  }   
}
  }
  return new Pose2d(4.986, 2.803, new Rotation2d(Math.toRadians(-61))); //Not updated this should be a default safe position
}
}