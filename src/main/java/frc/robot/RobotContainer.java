// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.Constants.OperatorConstants;
import frc.robot.commands.*;
import frc.robot.commands.ElevatorAndArm.ArmGoToLevel;
import frc.robot.commands.ElevatorAndArm.CmdCoralReset;
import frc.robot.commands.ElevatorAndArm.EAGoToLevel;
import frc.robot.commands.algae.AlgaeCmd;
import frc.robot.subsystems.*;
import frc.robot.subsystems.AlgaeIntake.PivotPos;
import frc.robot.subsystems.ElevatorAndArm.ElevAndArmPos;
import swervelib.SwerveInputStream;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.button.Trigger;

import java.io.File;
import java.io.ObjectInputFilter.Status;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import frc.robot.subsystems.*;
import frc.robot.commands.drivebase.AbsoluteDriveAdv;

import frc.robot.commands.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // The robot's subsystems
  public final Sensors m_sensors = new Sensors();
  public final DriveTrain m_driveTrain = new DriveTrain(new File(Filesystem.getDeployDirectory(), "swerve"));
  public final ElevatorAndArm m_elevatorAndArm = new ElevatorAndArm();
  public final AlgaeIntake m_AlgaeIntake = new AlgaeIntake();
  // Joysticks
  private final XboxController Articulator = new XboxController(1);
  private final XboxController drive_Controller = new XboxController(0);

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /**
   * Converts driver input into a field-relative ChassisSpeeds that is controlled
   * by angular velocity.
   */
  SwerveInputStream driveAngularVelocity = SwerveInputStream.of(m_driveTrain.getSwerveDrive(),
      () -> drive_Controller.getLeftY() * 1,
      () -> drive_Controller.getLeftX() * 1)
      .withControllerRotationAxis(this::getRightXInverted)
      .deadband(OperatorConstants.DEADBAND)
      .scaleTranslation(0.8)
      .allianceRelativeControl(true);

  // Applies deadbands and inverts controls because joysticks
  // are back-right positive while robot
  // controls are front-left positive
  // left stick controls translation
  // right stick controls the desired angle NOT angular rotation
  Command driveFieldOrientedDirectAngle = m_driveTrain.driveFieldOriented(driveAngularVelocity);

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();
  private double getRightXInverted() {
    return this.drive_Controller.getRightX() * -1;

  }
  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems

    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("Arm Pos Start", new EAGoToLevel(ElevAndArmPos.START));
    SmartDashboard.putData("Arm Pos Saftey", new EAGoToLevel(ElevAndArmPos.SAFETYPOS));
    //SmartDashboard.putData("Arm Pos lvl1", new EAGoToLevel(ElevAndArmPos.LEVEL1));
    //SmartDashboard.putData("Arm Pos lvl2", new EAGoToLevel(ElevAndArmPos.LEVEL2));
    //SmartDashboard.putData("Arm Pos lvl3", new EAGoToLevel(ElevAndArmPos.LEVEL3)); 
    //SmartDashboard.putData("Arm Pos lvl4", new EAGoToLevel(ElevAndArmPos.LEVEL4)); 

    SmartDashboard.putData("Algae Pickup", new AlgaeCmd(PivotPos.PICKUP, AlgaeIntake.Status.IN));
    SmartDashboard.putData("Algae Start", new AlgaeCmd(PivotPos.START, AlgaeIntake.Status.STOPPED));
    SmartDashboard.putData("Algae STOP", new AlgaeCmd(PivotPos.STOP, AlgaeIntake.Status.STOPPED));

    SmartDashboard.putData("Coral Reset",new CmdCoralReset());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons
    m_driveTrain.setDefaultCommand(driveFieldOrientedDirectAngle);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    
    Trigger DDown_Drive = new Trigger(drive_Controller.povDown(null));
        
    Trigger DLeft_Drive = new Trigger(drive_Controller.povLeft(null));
        
    Trigger DUp_Drive = new Trigger(drive_Controller.povLeft(null));
                
    Trigger DRight_Drive = new Trigger(drive_Controller.povLeft(null));
                
                Trigger A_Drive = new Trigger (drive_Controller.a(null));
                
                Trigger B_Drive = new Trigger(drive_Controller.b(null));
                

                Trigger X_Drive = new Trigger(drive_Controller.x(null));
                Trigger Y_Drive = new Trigger(drive_Controller.y(null));

                Trigger Back_Drive = new Trigger(drive_Controller.back(null));
                Trigger Start_Drive = new Trigger(drive_Controller.start(null));

                Trigger LBumper_Drive = new Trigger(drive_Controller.leftBumper(null));
                Trigger Ltrigger_Drive = new Trigger(drive_Controller.leftTrigger(null));

                Trigger RBumper_Drive = new Trigger(drive_Controller.rightBumper(null));
                Trigger Rtrigger_Drive = new Trigger(drive_Controller.rightTrigger(null));

                Trigger LJC_Drive = new Trigger(drive_Controller.leftStick(null));
                Trigger RJC_Drive = new Trigger(drive_Controller.rightStick(null));


    Trigger DDown_Artic = new Trigger(Articulator.povDown(null));
                DDown_Artic.onTrue(new ArmGoToLevel(ElevAndArmPos.LEVEL1));
    Trigger DLeft_Artic = new Trigger(Articulator.povLeft(null));
                DLeft_Artic.onTrue(new ArmGoToLevel(ElevAndArmPos.LEVEL2));
    Trigger DUp_Artic = new Trigger(Articulator.povLeft(null));
                DUp_Artic.onTrue(new ArmGoToLevel(ElevAndArmPos.LEVEL3));
    Trigger DRight_Artic = new Trigger(Articulator.povLeft(null));
                DRight_Artic.onTrue(new ArmGoToLevel(ElevAndArmPos.LEVEL4));
                Trigger A_Artic = new Trigger (Articulator.a(null));
                A_Artic.onTrue(new AlgaeCmd(AlgaeIntake.PivotPos.PICKUP,AlgaeIntake.Status.IN));
                Trigger B_Artic = new Trigger(Articulator.b(null));
                B_Artic.onTrue(new AlgaeCmd(AlgaeIntake.PivotPos.START,AlgaeIntake.Status.STOPPED)); 

                Trigger X_Artic = new Trigger(Articulator.x(null));
                Trigger Y_Artic = new Trigger(Articulator.y(null));

                Trigger Back_Artic = new Trigger(Articulator.back(null));
                Trigger Start_Artic = new Trigger(Articulator.start(null));

                Trigger LBumper_Artic = new Trigger(Articulator.leftBumper(null));
                Trigger Ltrigger_Artic = new Trigger(Articulator.leftTrigger(null));

                Trigger RBumper_Artic = new Trigger(Articulator.rightBumper(null));
                Trigger Rtrigger_Artic = new Trigger(Articulator.rightTrigger(null));

                Trigger LJC_Artic = new Trigger(Articulator.leftStick(null));
                Trigger RJC_Artic = new Trigger(Articulator.rightStick(null));


                Trigger Coralhopper = new Trigger(m_sensors.Coralhopper::get);
                Trigger AlgIntake = new Trigger(m_sensors.AlgIntake::get);
                Trigger CoralIntake = new Trigger(m_sensors.CoralIntake::get);
                AlgIntake.onTrue(new AlgaeCmd(AlgaeIntake.PivotPos.HELD, AlgaeIntake.Status.STOPPED));
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public XboxController getDrive_Controller() {
    return drive_Controller;
  }

  public XboxController getArticulator() {
    return Articulator;
  }

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

  public void updateSmartDashboard() {
    SmartDashboard.putNumber("Arm Targ", m_elevatorAndArm.getTargetArmPos());
    SmartDashboard.putNumber("Arm Cur", m_elevatorAndArm.getArmCurPos());
    SmartDashboard.putNumber("Elev Poc", m_elevatorAndArm.getElevatorCurPos());
    SmartDashboard.putNumber("Elev Targ", m_elevatorAndArm.getElevatorTargPos());
    //SmartDashboard.putNumber("ElevApplied" , m_AlgaeIntake.pivotMotor.getAppliedOutput());
    //SmartDashboard.putNumber("ElevOutput",m_AlgaeIntake.pivotMotor.getOutputCurrent() );
    SmartDashboard.putNumber("AlgaePivPos", m_AlgaeIntake.getPivotCurPos());
    SmartDashboard.putNumber("Coral Cur Pos", m_elevatorAndArm.getCoralCurPos());
    SmartDashboard.putNumber("Coral Target Pos", m_elevatorAndArm.getCoralCmdPos());

    SmartDashboard.putBoolean("Coral Intake", m_sensors.CoralIntake.get());
    SmartDashboard.putBoolean("Coral Hopper", m_sensors.Coralhopper.get());
    SmartDashboard.putBoolean("Algae Intake", m_sensors.AlgIntake.get());

  }

}
