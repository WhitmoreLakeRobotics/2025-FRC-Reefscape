// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands.ElevatorAndArm;

import edu.wpi.first.wpilibj2.command.Command;

import java.lang.System.Logger.Level;
import java.util.function.DoubleSupplier;

import frc.robot.Robot;
import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.ElevatorAndArm;
import frc.robot.subsystems.ElevatorAndArm.ElevAndArmPos;
import frc.robot.subsystems.Wipers.GuidePos;
import frc.utils.RobotMath;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class CmdCoralIntake extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private ElevatorAndArm m_elevator;
    private boolean bDone = false;
    private double m_NewPos;
    private int m_PidSlot;
    private ElevatorAndArm.ElevAndArmPos targPos = ElevAndArmPos.CIntake;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double startTime = 0;
    private double delay = 0;
    private double endTime = 0;
    private boolean bStarted = false;
    private CoralPhases currCoralPhase = CoralPhases.INIT;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public CmdCoralIntake() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    public CmdCoralIntake(double tDelay) {
        delay = tDelay;
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        m_elevator = RobotContainer.getInstance().m_elevatorAndArm;
        // m_elevator.setNewPos(ElevAndArmPos.PICKUP);
        addRequirements(m_elevator);
        currCoralPhase = CoralPhases.INIT;
        // if (delay == 0) {
        // if(m_elevator.getTargetPos() == ElevAndArmPos.PICKUP){
        // m_elevator.setNewPos(targPos);
        // }
        // }else {
        startTime = RobotMath.getTime();
        endTime = startTime + delay;
        // }

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // bDone = m_elevator.isElevatorAndArmAtTarget(targPos);
/*
        switch (currCoralPhase) {
            case INIT:
              RobotContainer.getInstance().m_Wipers.setRightCmdPos(GuidePos.START);
                if (m_elevator.getTargetPos() != ElevAndArmPos.PICKUP
                        && !m_elevator.isElevatorAndArmAtTarget(ElevAndArmPos.PICKUP)) {
                    m_elevator.setNewPos(ElevAndArmPos.PICKUP);
                }
            m_elevator.setNewPos(ElevAndArmPos.CIntake);
            currCoralPhase = currCoralPhase.INTAKING;
            case INTAKING:
                m_elevator.isIntaking = true;

                if (!RobotContainer.getInstance().m_sensors.Coralhopper.get()) {
                    currCoralPhase = currCoralPhase.RETRACTING;
                }
                break;
            case RETRACTING:
                m_elevator.resetCoralEncoder();
                if (m_elevator.getTargetPos() == ElevAndArmPos.CHold
                        && m_elevator.isCoralAtTarget(ElevAndArmPos.CHold)) {
                    currCoralPhase = currCoralPhase.LOAD;
                }

                break;
            case LOAD:
                m_elevator.setNewPos(ElevAndArmPos.SAFETYPOS);
                m_elevator.isIntaking = false;
                bDone = true;
                break;
            default:
                break;
        } */

        if (m_elevator.getTargetPos() == ElevAndArmPos.PICKUP
                && m_elevator.isElevatorAndArmAtTarget(ElevAndArmPos.PICKUP)) {
            m_elevator.setNewPos(ElevAndArmPos.CIntake);
            RobotContainer.getInstance().m_Wipers.setRightCmdPos(GuidePos.START);
            bStarted = true;
            m_elevator.isIntaking = true;
        }
        if (m_elevator.getTargetPos() == ElevAndArmPos.CIntake &&
                !RobotContainer.getInstance().m_sensors.Coralhopper.get()) {
            m_elevator.resetCoralEncoder();
            m_elevator.isIntaking = true;
            // m_elevator.setNewPos(ElevAndArmPos.CHold);
        }
        if (m_elevator.getTargetPos() == ElevAndArmPos.CHold && m_elevator.isCoralAtTarget(ElevAndArmPos.CHold)) {
            m_elevator.setNewPos(ElevAndArmPos.SAFETYPOS);
            m_elevator.isIntaking = false;
            bDone = true;
            end(false);
        } 
    
                /*
         * if ((RobotMath.getTime() >= endTime) && (delay > 0) && (!bStarted)){
         * m_elevator.setNewPos(targPos);
         * bStarted = true;
         * }
         */

        if (bDone == true) {
            end(false);
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return bDone;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }

    enum CoralPhases {
        INIT,
        PRECORAL, // waiting for a coral to load
        INTAKING, // intaking coral
        RETRACTING, // retracting
        LOAD // LOCKED and Loaded
    }

}
