package frc.robot.commands.ElevatorAndArm;

import edu.wpi.first.wpilibj2.command.Command;

import frc.robot.Robot;
import frc.robot.RobotContainer;
import frc.robot.subsystems.ElevatorAndArm;
import frc.robot.subsystems.Coral.CoralPhase;
import frc.robot.subsystems.ElevatorAndArm.ElevAndArmPos;
import frc.robot.subsystems.Coral;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AlgaeExtract extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private ElevatorAndArm m_elevator;
    private Coral m_coral;
    private boolean bDone = false;
    private ElevatorAndArm.ElevAndArmPos targPos = ElevAndArmPos.ALGAEEXTRACTLOWER;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public AlgaeExtract(ElevAndArmPos tpos) {

        targPos = tpos;

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        m_elevator = RobotContainer.getInstance().m_elevatorAndArm;
        m_coral = RobotContainer.getInstance().m_Coral;
        addRequirements(m_elevator);

        m_elevator.setAlgaeExtract(targPos);

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

        if (m_elevator.isElevatorAndArmAtTarget(targPos)) {
            bDone = true;
            m_coral.setCoralPhase(CoralPhase.ALGE_EXTRACT);
        }

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return bDone;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
