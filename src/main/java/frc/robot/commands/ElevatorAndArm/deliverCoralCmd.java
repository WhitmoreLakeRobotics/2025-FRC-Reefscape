// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands.ElevatorAndArm;
import edu.wpi.first.wpilibj2.command.Command;

import java.lang.System.Logger.Level;
import java.util.function.DoubleSupplier;

import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.ElevatorAndArm;
import frc.robot.subsystems.ElevatorAndArm.ElevAndArmPos;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class deliverCoralCmd extends Command {

    private ElevatorAndArm m_elevator;
    private boolean bDone = false;
    ElevAndArmPos curPos; 
    ElevAndArmPos newPos = ElevAndArmPos.LEVEL1DEL;

    
    public deliverCoralCmd() {
        m_elevator = RobotContainer.getInstance().m_elevatorAndArm;
        curPos = m_elevator.getTargetPos();
    }
        private void deliverCoral() {
     

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() { 
        switch (curPos) {
            case LEVEL1:
               newPos = ElevAndArmPos.LEVEL1DEL;
                m_elevator.setNewPos(newPos);
                break;
                case LEVEL2:
               newPos = ElevAndArmPos.LEVEL2DEL;
                m_elevator.setNewPos(newPos);
                break;
                case LEVEL3:
                newPos = ElevAndArmPos.LEVEL3DEL;
                m_elevator.setNewPos(newPos);
                break;
                case LEVEL4:
                newPos = ElevAndArmPos.LEVEL4DEL;
                m_elevator.setNewPos(newPos);
                break;
                default: 
                //DO NOTHING
                break;
        } 
        m_elevator = RobotContainer.getInstance().m_elevatorAndArm;
        addRequirements(m_elevator);
      //  deliverCoral();


    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        bDone = m_elevator.isElevatorAndArmAtTarget(newPos);

        if (bDone == true) {
            end(false);
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return bDone;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
