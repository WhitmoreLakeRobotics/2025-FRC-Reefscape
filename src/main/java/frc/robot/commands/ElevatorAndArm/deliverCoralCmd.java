// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands.ElevatorAndArm;

import edu.wpi.first.wpilibj2.command.Command;

import java.lang.System.Logger.Level;
import java.util.function.DoubleSupplier;

import frc.robot.Robot;
import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Coral;
import frc.robot.subsystems.ElevatorAndArm;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Coral.CoralPhase;
import frc.robot.subsystems.ElevatorAndArm.ALGAE_THROWING_STAGE;
import frc.robot.subsystems.ElevatorAndArm.ElevAndArmPos;

/**
 *
 */
public class deliverCoralCmd extends Command {

    private Coral m_coral;
    private ElevatorAndArm m_elevator;
    private boolean bDone = false;
    private ElevatorAndArm.ElevAndArmPos targElevAndArmPos = null;

    public deliverCoralCmd() {

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        m_coral = RobotContainer.getInstance().m_Coral;
        m_elevator = RobotContainer.getInstance().m_elevatorAndArm;
        targElevAndArmPos = m_elevator.getTargetPos();
        addRequirements(RobotContainer.getInstance().m_Coral);

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        if (m_elevator.isElevatorAndArmAtTarget(targElevAndArmPos)) {
            switch (targElevAndArmPos) {

                case LEVEL1:
                    m_coral.setCoralPhase(CoralPhase.LEVEL_1_DEPLOY);
                    break;

                case LEVEL2:
                    m_coral.setCoralPhase(CoralPhase.LEVEL_2_DEPLOY);
                    break;

                case LEVEL3:
                    m_coral.setCoralPhase(CoralPhase.LEVEL_3_DEPLOY);
                    break;

                case LEVEL4:
                    m_coral.setCoralPhase(CoralPhase.LEVEL_4_DEPLOY);
                 //   m_elevator.setNewPos(ElevAndArmPos.LEVEL4OUTOFWAY);
                    break;

                case ALGAE_THROWING_STARTPOS:
                    m_elevator.setAlgaeThrowingPhase(ALGAE_THROWING_STAGE.ALGAE_THROWING_START);

                default:
                    // DO NOTHING
                    break;
            }
            bDone = true;
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {

    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return bDone;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
