// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands.ElevatorAndArm;
import edu.wpi.first.wpilibj2.command.Command;

import java.lang.System.Logger.Level;
import java.util.function.DoubleSupplier;

import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.ElevatorAndArm;
import frc.robot.subsystems.ElevatorAndArm.ElevAndArmPos;
import frc.utils.RobotMath;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class EAGoToLevel extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private ElevatorAndArm m_elevator;
    private boolean bDone = false;
    private double m_NewPos;
    private int m_PidSlot;
    private ElevatorAndArm.ElevAndArmPos targPos = ElevAndArmPos.LEVEL1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double startTime = 0;
    private double delay = 0;
    private double endTime= 0;
    private boolean bStarted = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    
    public EAGoToLevel(ElevAndArmPos tpos) {

        targPos = tpos;

    }
    public EAGoToLevel(ElevAndArmPos tpos, double tDelay) {

        targPos = tpos;
        delay = tDelay;

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        m_elevator = RobotContainer.getInstance().m_elevatorAndArm;
        addRequirements(m_elevator);
        if (targPos == ElevAndArmPos.PICKUP) {
            m_elevator.REALresetCoralEncoder(false);
        }
       if (delay == 0){
        m_elevator.setNewPos(targPos);
        bStarted = true;
       }  else{
        startTime = RobotMath.getTime();
        endTime = startTime + delay;
       }
        

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        bDone = m_elevator.isElevatorAndArmAtTarget(targPos);

        if ((RobotMath.getTime() >= endTime) && (delay > 0) && (!bStarted)){
            m_elevator.setNewPos(targPos);
            bStarted = true;
        }
        if (bDone == true) {
            end(false);
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return bDone;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
