// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands.algae;
import edu.wpi.first.wpilibj2.command.Command;

import java.lang.System.Logger.Level;
import java.util.function.DoubleSupplier;

import frc.robot.RobotContainer;
import frc.robot.subsystems.AlgaeIntake;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.ElevatorAndArm;
import frc.robot.subsystems.ElevatorAndArm.ElevAndArmPos;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AlgaeCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private AlgaeIntake m_AlgaeIntake;
    private boolean bDone = false;
    private double m_NewPos;
    private int m_PidSlot;
   private AlgaeIntake.PivotPos targPos = AlgaeIntake.PivotPos.START;
   private AlgaeIntake.Status targStatus = AlgaeIntake.Status.STOPPED;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    
    public AlgaeCmd(AlgaeIntake.PivotPos tpos, AlgaeIntake.Status tstatus) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
       
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        targPos = tpos;
        targStatus = tstatus;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        m_AlgaeIntake = RobotContainer.getInstance().m_AlgaeIntake;
        addRequirements(m_AlgaeIntake);
        m_AlgaeIntake.setNewPos(targPos);
        m_AlgaeIntake.setIntakeStatus(targStatus);


    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        bDone = m_AlgaeIntake.isPivotAtTarget(targPos);
        if (bDone == true) {
            end(true);
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return bDone;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
